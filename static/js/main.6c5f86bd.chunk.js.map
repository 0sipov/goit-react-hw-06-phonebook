{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactForm/index.js","components/Filter/index.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/ContactList/index.js","components/App/App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","createContact","createAction","contact","payload","name","number","id","uuidv4","removeContact","filterUpdate","ContactForm","state","handleChange","e","setState","preState","target","value","isContainName","toLowerCase","props","contacts","items","find","clearContactInput","handleSubmit","onCreateContact","preventDefault","alert","this","className","styles","form","onSubmit","input","type","onChange","addButton","Component","connect","dispatch","Filter","contactName","filter","filterContacts","normalizedFilter","includes","ContactList","filtredContacts","onRemoveContact","contactId","map","elem","removeButton","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","itemsReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6c5f86bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3u4C8\",\"contact\":\"ContactList_contact__wq317\",\"removeButton\":\"ContactList_removeButton__2WRqq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__QgBIh\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n// import {\n//   CREATE_CONTACT,\n//   REMOVE_CONTACT,\n//   FILTER_UPDATE,\n// } from './contacts-action-types';\n\n//VANILLA REDUX\n\n// export const createContact = contact => ({\n//   type: CREATE_CONTACT,\n//   payload: {\n//     name: contact.name,\n//     number: contact.number,\n//     id: uuidv4(),\n//   },\n// });\n\n// export const removeContact = contactId => ({\n//   type: REMOVE_CONTACT,\n//   payload: contactId,\n// });\n\n// export const filterUpdate = contactName => ({\n//   type: FILTER_UPDATE,\n//   payload: contactName,\n// });\n\n//TOOLKIT\n\nexport const createContact = createAction(\n  'contacts/createContact',\n  contact => ({\n    payload: {\n      name: contact.name,\n      number: contact.number,\n      id: uuidv4(),\n    },\n  }),\n);\n\nexport const removeContact = createAction('contacts/removeContact');\n\nexport const filterUpdate = createAction('contacts/updateFilter');\n","import React, { Component } from 'react';\nimport styles from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createContact } from '../../redux/contacts/contacts-actions';\n\nclass ContactForm extends Component {\n  state = {\n    contact: { name: '', number: '' },\n  };\n\n  static propTypes = {\n    onCreateContact: PropTypes.func,\n  };\n\n  handleChange = e => {\n    this.setState(preState => {\n      return {\n        contact: { ...preState.contact, [e.target.name]: e.target.value },\n      };\n    });\n  };\n\n  isContainName = name => {\n    name = name.toLowerCase();\n    return this.props.state.contacts.items.find(\n      e => e.name.toLowerCase() === name,\n    );\n  };\n\n  clearContactInput = () =>\n    this.setState({ contact: { name: '', number: '' } });\n\n  handleSubmit = e => {\n    const { onCreateContact } = this.props;\n    const { contact } = this.state;\n    e.preventDefault();\n    this.isContainName(contact.name)\n      ? alert(`Contact ${contact.name} already exists.`)\n      : onCreateContact(contact);\n    this.clearContactInput();\n  };\n\n  render() {\n    const { contact } = this.state;\n    const { handleChange } = this;\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            className={styles.input}\n            name=\"name\"\n            type=\"text\"\n            value={contact.name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            className={styles.input}\n            name=\"number\"\n            type=\"text\"\n            value={contact.number}\n            onChange={handleChange}\n          />\n        </label>\n        <button className={styles.addButton} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ state });\n\nconst mapDispatchToProps = dispatch => {\n  return { onCreateContact: contact => dispatch(createContact(contact)) };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import ContactForm from './ContactForm';\nexport default ContactForm;\n","import Filter from './Filter';\nexport default Filter;\n","import React from 'react';\nimport styles from './Filter.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterUpdate } from '../../redux/contacts/contacts-actions';\n\nconst Filter = props => {\n  const { filterUpdate, state } = props;\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={styles.input}\n        name=\"filter\"\n        type=\"text\"\n        value={state.filter}\n        onChange={e => filterUpdate(e.target.value)}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  onChangeFilter: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({ state });\n\nconst mapDispatchToProps = dispatch => {\n  return { filterUpdate: contactName => dispatch(filterUpdate(contactName)) };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/contacts-actions';\n\nconst ContactList = props => {\n  const { filtredContacts, onRemoveContact } = props;\n  return (\n    <ul className={styles.contacts}>\n      {filtredContacts.map(elem => {\n        return (\n          <li className={styles.contact} key={elem.id}>\n            <p>\n              {elem.name}: {elem.number}\n            </p>\n            <button\n              className={styles.removeButton}\n              type=\"button\"\n              onClick={() => {\n                onRemoveContact(elem.id);\n              }}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  onRemoveContact: PropTypes.func,\n  filtredContacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n\nconst filterContacts = (filter, contacts) => {\n  const normalizedFilter = filter.toLowerCase();\n  const filtredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n  return filtredContacts;\n};\n\nconst mapStateToProps = state => ({\n  filtredContacts: filterContacts(state.contacts.filter, state.contacts.items),\n});\n\nconst mapDispatchToProps = dispatch => {\n  return { onRemoveContact: contactId => dispatch(removeContact(contactId)) };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactList from './ContactList';\nexport default ContactList;\n","import React from 'react';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Phone book</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { createContact, removeContact, filterUpdate } from './contacts-actions';\n// import {\n//   CREATE_CONTACT,\n//   REMOVE_CONTACT,\n//   FILTER_UPDATE,\n// } from './contacts-action-types';\n\nconst itemsReducer = createReducer([], {\n  [createContact]: (state, { payload }) => [...state, payload],\n  [removeContact]: (state, { payload }) => state.filter(e => e.id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [filterUpdate]: (_, { payload }) => payload,\n});\n\n//VANILLA REDUX\n\n// const itemsReducer = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case CREATE_CONTACT:\n//       return [\n//         ...state,\n//         { name: payload.name, id: payload.id, number: payload.number },\n//       ];\n//     case REMOVE_CONTACT:\n//       const newContacts = state.filter(e => {\n//         return e.id !== payload;\n//       });\n//       return newContacts;\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case FILTER_UPDATE:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\n// import { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// const rootReducer = combineReducers({ contacts: contactsReducer });\n// const store = createStore(rootReducer, composeWithDevTools(applyMiddleware()));\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  whitelist: ['items'],\n};\n\nconst store = configureStore({\n  reducer: { contacts: persistReducer(contactsPersistConfig, contactsReducer) },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__40RkM\",\"input\":\"ContactForm_input__3lg1Q\",\"addButton\":\"ContactForm_addButton__14MzW\"};"],"sourceRoot":""}