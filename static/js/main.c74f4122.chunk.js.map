{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactForm/index.js","components/Filter/Filter.js","components/Filter/index.js","components/ContactList/ContactList.js","components/ContactList/index.js","components/App/App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","createContact","createAction","contact","payload","name","number","id","uuidv4","removeContact","filterUpdate","ContactForm","state","handleChange","e","setState","preState","target","value","this","onCreateContact","props","className","styles","form","onSubmit","preventDefault","input","type","onChange","addButton","Component","connect","undefined","dispatch","Filter","contactName","ContactList","filtredContacts","onRemoveContact","contacts","map","elem","removeButton","onClick","filterContacts","filter","normalizedFilter","toLowerCase","includes","items","contactId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","itemsReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c74f4122.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__40RkM\",\"input\":\"ContactForm_input__3lg1Q\",\"addButton\":\"ContactForm_addButton__14MzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3u4C8\",\"contact\":\"ContactList_contact__wq317\",\"removeButton\":\"ContactList_removeButton__2WRqq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__QgBIh\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n// import {\n//   CREATE_CONTACT,\n//   REMOVE_CONTACT,\n//   FILTER_UPDATE,\n// } from './contacts-action-types';\n\n//VANILLA REDUX\n\n// export const createContact = contact => ({\n//   type: CREATE_CONTACT,\n//   payload: {\n//     name: contact.name,\n//     number: contact.number,\n//     id: uuidv4(),\n//   },\n// });\n\n// export const removeContact = contactId => ({\n//   type: REMOVE_CONTACT,\n//   payload: contactId,\n// });\n\n// export const filterUpdate = contactName => ({\n//   type: FILTER_UPDATE,\n//   payload: contactName,\n// });\n\n//TOOLKIT\n\nexport const createContact = createAction(\n  'contacts/createContact',\n  contact => ({\n    payload: {\n      name: contact.name,\n      number: contact.number,\n      id: uuidv4(),\n    },\n  }),\n);\n\nexport const removeContact = createAction('contacts/removeContact');\n\nexport const filterUpdate = createAction('contacts/updateFilter');\n","import React, { Component } from 'react';\nimport styles from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createContact } from '../../redux/contacts/contacts-actions';\n\nclass ContactForm extends Component {\n  state = {\n    contact: { name: '', number: '' },\n  };\n\n  static propTypes = {\n    onCreateContact: PropTypes.func,\n  };\n\n  handleChange = e => {\n    this.setState(preState => {\n      return {\n        contact: { ...preState.contact, [e.target.name]: e.target.value },\n      };\n    });\n  };\n\n  render() {\n    const { contact } = this.state;\n    const { onCreateContact } = this.props;\n    const { handleChange } = this;\n    return (\n      <form\n        className={styles.form}\n        onSubmit={e => {\n          e.preventDefault();\n          onCreateContact(contact);\n        }}\n      >\n        <label>\n          Name\n          <input\n            className={styles.input}\n            name=\"name\"\n            type=\"text\"\n            value={contact.name}\n            onChange={handleChange}\n          ></input>\n        </label>\n        <label>\n          Number\n          <input\n            className={styles.input}\n            name=\"number\"\n            type=\"text\"\n            value={contact.number}\n            onChange={handleChange}\n          ></input>\n        </label>\n        <button className={styles.addButton} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return { onCreateContact: contact => dispatch(createContact(contact)) };\n};\n\nexport default connect(undefined, mapDispatchToProps)(ContactForm);\n","import ContactForm from './ContactForm';\nexport default ContactForm;\n","import React, { Component } from 'react';\nimport styles from './Filter.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterUpdate } from '../../redux/contacts/contacts-actions';\n\nclass Filter extends Component {\n  static propTypes = {\n    onChangeFilter: PropTypes.func,\n  };\n\n  render() {\n    const { filterUpdate } = this.props;\n    return (\n      <label>\n        Find contacts by name\n        <input\n          className={styles.input}\n          name=\"filter\"\n          type=\"text\"\n          onChange={e => filterUpdate(e.target.value)}\n        ></input>\n      </label>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return { filterUpdate: contactName => dispatch(filterUpdate(contactName)) };\n};\n\nexport default connect(undefined, mapDispatchToProps)(Filter);\n","import Filter from './Filter';\nexport default Filter;\n","import React, { Component } from 'react';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeContact } from '../../redux/contacts/contacts-actions';\n\nclass ContactList extends Component {\n  render() {\n    const { filtredContacts, onRemoveContact } = this.props;\n    return (\n      <ul className={styles.contacts}>\n        {filtredContacts.map(elem => {\n          return (\n            <li className={styles.contact} key={elem.id}>\n              <p>\n                {elem.name}: {elem.number}\n              </p>\n              <button\n                className={styles.removeButton}\n                type=\"button\"\n                onClick={() => {\n                  onRemoveContact(elem.id);\n                }}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nContactList.propTypes = {\n  onRemoveContact: PropTypes.func,\n  filtredContacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n\nconst filterContacts = (filter, contacts) => {\n  const normalizedFilter = filter.toLowerCase();\n  const filtredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n  return filtredContacts;\n};\n\nconst mapStateToProps = state => {\n  return {\n    filtredContacts: filterContacts(\n      state.contacts.filter,\n      state.contacts.items,\n    ),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return { onRemoveContact: contactId => dispatch(removeContact(contactId)) };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactList from './ContactList';\nexport default ContactList;\n","import React, { Component } from 'react';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\nimport './App.css';\n\nclass App extends Component {\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({\n  //       contacts: parsedContacts,\n  //     });\n  //   }\n  // }\n\n  // componentDidUpdate(prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // isContainName = name => {\n  //   return Boolean(\n  // this.state.contacts.find(\n  //   e => e.name.toLowerCase() === name.toLowerCase(),\n  // ),\n  //   );\n  // };\n\n  // handleCreateContact = contact => {\n  //   const { name, number } = contact;\n  //   this.isContainName(name)\n  //     ? alert(`Contact ${name} already exists.`)\n  //     : this.setState(preState => {\n  //         return {\n  //           contacts: [...preState.contacts, { name, id: uuidv4(), number }],\n  //         };\n  //       });\n  // };\n\n  // handleChangeFilter = e => {\n  //   this.setState({ filter: e.target.value });\n  // };\n\n  // handleFilterContacts = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n  //   const filtredContacts = contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  //   return filtredContacts;\n  // };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phone book</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { createContact, removeContact, filterUpdate } from './contacts-actions';\n// import {\n//   CREATE_CONTACT,\n//   REMOVE_CONTACT,\n//   FILTER_UPDATE,\n// } from './contacts-action-types';\n\nconst itemsReducer = createReducer([], {\n  [createContact]: (state, { payload }) => [...state, payload],\n  [removeContact]: (state, { payload }) => state.filter(e => e.id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [filterUpdate]: (_, { payload }) => payload,\n});\n\n//VANILLA REDUX\n\n// const itemsReducer = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case CREATE_CONTACT:\n//       return [\n//         ...state,\n//         { name: payload.name, id: payload.id, number: payload.number },\n//       ];\n//     case REMOVE_CONTACT:\n//       const newContacts = state.filter(e => {\n//         return e.id !== payload;\n//       });\n//       return newContacts;\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case FILTER_UPDATE:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\n// import { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n// const rootReducer = combineReducers({ contacts: contactsReducer });\n// const store = createStore(rootReducer, composeWithDevTools(applyMiddleware()));\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\nreportWebVitals();\n"],"sourceRoot":""}